[{"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/index.js":"1","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/App.js":"2","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/allStories.js":"3","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/store/storyContext.js":"4","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/store/globalContext.js":"5","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/storyPreview.js":"6","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/storyContainer.js":"7","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/store/progressContext.js":"8","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/progressBar/progressArray.js":"9","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/progressBar/progress.js":"10"},{"size":142,"mtime":1616592305000,"results":"11","hashOfConfig":"12"},{"size":1490,"mtime":1635708625318,"results":"13","hashOfConfig":"12"},{"size":492,"mtime":1635063791708,"results":"14","hashOfConfig":"12"},{"size":196,"mtime":1635603749057,"results":"15","hashOfConfig":"12"},{"size":165,"mtime":1635061071681,"results":"16","hashOfConfig":"12"},{"size":571,"mtime":1635604325144,"results":"17","hashOfConfig":"12"},{"size":3033,"mtime":1635708382525,"results":"18","hashOfConfig":"12"},{"size":155,"mtime":1635603879531,"results":"19","hashOfConfig":"12"},{"size":2630,"mtime":1635708798419,"results":"20","hashOfConfig":"12"},{"size":987,"mtime":1635621012567,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"pnvh0d",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/index.js",[],["45","46"],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/App.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/allStories.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/store/storyContext.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/store/globalContext.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/storyPreview.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/storyContainer.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/store/progressContext.js",[],"/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/progressBar/progressArray.js",["47"],"import React, { useEffect, useState, useContext, useRef } from 'react';\nimport Progress from './progress';\nimport storyContext from '../../store/storyContext';\nimport globalContext from '../../store/globalContext';\nimport progressContext from '../../store/progressContext';\nimport classes from './progressArray.module.css';\n\nconst ProgressArray = () => {\n\n    const [count, setCount] = useState(0);\n    const { currentStoryId, next, clear, pause } = useContext(progressContext);\n    const { defaultInterval } = useContext(globalContext);\n    const { stories, currentUserStorySetId } = useContext(storyContext);\n\n    const selectedStories = stories.find(story => story.id === currentUserStorySetId).stories;\n\n    useEffect(() => {\n        setCount(0)\n    }, [currentStoryId, selectedStories, currentUserStorySetId])\n\n    useEffect(() => {\n        if (!pause) {\n            animationFrameId.current = requestAnimationFrame(incrementCount)\n        }\n        return () => {\n            cancelAnimationFrame(animationFrameId.current)\n        }\n    }, [currentStoryId, currentUserStorySetId, pause])\n\n    let animationFrameId = useRef();\n\n    let countCopy = count;\n    const incrementCount = () => {\n        if (countCopy === 0) storyStartCallback()\n        setCount((count) => {\n            const interval = getCurrentInterval()\n            countCopy = count + (100 / ((interval / 1000) * 60))\n            return count + (100 / ((interval / 1000) * 60))\n        })\n        if (countCopy < 100) {\n            animationFrameId.current = requestAnimationFrame(incrementCount)\n        } else {\n            storyEndCallback();\n            if (currentStoryId === selectedStories.length) {\n                allStoriesEndCallback();\n            }\n            cancelAnimationFrame(animationFrameId.current);\n        }\n    }\n\n    const storyStartCallback = () => {\n    }\n\n    const storyEndCallback = () => {\n        next();\n    }\n\n    const allStoriesEndCallback = () => {\n        clear();\n    }\n\n    const getCurrentInterval = () => {\n        const currentStory = selectedStories.find(story => story.id === currentStoryId);\n        if (currentStory.type === 'VIDEO') return currentStory.duration;\n        return defaultInterval\n    }\n\n    return (\n        <div className={classes.progressArr}>\n            {selectedStories.map((_, i) =>\n                <Progress\n                    key={i}\n                    count={count}\n                    width={1 / selectedStories.length}\n                    active={i+1 === currentStoryId ? 1 : (i+1 < currentStoryId ? 2 : 0)}\n                />)}\n        </div>\n    )\n}\n\nexport default ProgressArray;","/Users/sushkv/Documents/mydev/React/reactWorks/share-stories/src/components/progressBar/progress.js",["48"],"import React, { useContext } from 'react';\nimport classes from './progress.module.css';\n\nconst Progress = (props) => {\n    // const { bufferAction, pause } = useContext(ProgressCtx)\n\n    const getProgressStyle = ({ active }) => {\n        switch (active) {\n            case 2:\n                return { width: '100%' }\n            case 1:\n                return { transform: `scaleX(${props.count / 100})` }\n            case 0:\n                return { width: 0 }\n            default:\n                return { width: 0 }\n        }\n    }\n\n    const getProgressWrapperStyle = (width) => ({\n        width: `${width * 100}%`\n        // opacity: pause && !bufferAction ? 0 : 1\n    })\n\n    const { width, active } = props\n    return (\n        <div className={classes.progressBar} \n            style={{ ...getProgressWrapperStyle(width) }}>\n            <div className={classes.inner}\n                style={{ ...getProgressStyle({ active }) }} />\n        </div>\n    )\n}\n\nexport default Progress;\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":28,"column":8,"nodeType":"55","endLine":28,"endColumn":54,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":27},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'incrementCount'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [currentStoryId, currentUserStorySetId, incrementCount, pause]",{"range":"66","text":"67"},[1046,1092],"[currentStoryId, currentUserStorySetId, incrementCount, pause]"]